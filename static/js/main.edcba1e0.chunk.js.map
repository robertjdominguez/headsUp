{"version":3,"sources":["components/navigation/Navbar.js","components/splash/Opponents.js","store/actions/teamActions.js","components/levels/levelMaster.js","components/levels/Levels.js","store/actions/levelActions.js","components/game/TeamName.js","components/game/TeamScore.js","components/game/Map.js","components/game/Controls.js","store/actions/scoreActions.js","components/game/Fight.js","App.js","serviceWorker.js","store/reducers/teamReducer.js","store/reducers/levelReducer.js","store/reducers/scoreReducer.js","store/reducers/rootReducer.js","index.js"],"names":["NavBar","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","toggle","bind","assertThisInitialized","state","isOpen","setState","react_default","a","createElement","Navbar","color","expand","className","NavbarBrand","react_router_dom","to","NavbarToggler","onClick","Collapse","navbar","lib","NavLink","Component","Opponents","teamOne","teamTwo","handleChange","e","defineProperty","target","id","value","handleSubmit","teamNames","console","log","history","push","Form","onSubmit","FormGroup","Card","CardBody","Label","for","Input","type","onChange","name","placeholder","Button","connect","dispatch","teams","names","getState","levels","desc","path","questions","letter","answer","Levels","levelChoice","levelPicker","_this2","map","level","TeamName","team","TeamScore","score","Map","react_router","style","maxWidth","src","levelObject","alt","Controls","userAnswer","currentQuestion","handleClick","length","addPoints","answerRef","React","createRef","_this$props$state","ref","withRouter","Fight","scoreOne","scoreTwo","scores","game_TeamName","game_TeamScore","teamOneScore","game_Map","teamTwoScore","game_Controls","App","navigation_Navbar","exact","component","Boolean","window","location","hostname","match","initState","teamReducer","arguments","undefined","action","objectSpread","levelReducer","sort","b","Math","random","concat","scoreReducer","rootReducer","combineReducers","store","createStore","applyMiddleware","thunk","ReactDOM","render","es","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.edcba1e0.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport { Link } from \"react-router-dom\";\nimport {\n    Collapse,\n    Navbar,\n    NavbarToggler,\n    NavbarBrand,\n    Nav,\n    NavItem,\n    NavLink } from 'reactstrap';\nimport { LinkContainer } from 'react-router-bootstrap';\n\n\nclass NavBar extends Component {\n\n    constructor(props) {\n        super(props);\n    \n        this.toggle = this.toggle.bind(this);\n        this.state = {\n          isOpen: false,\n        };\n      }\n      toggle() {\n        this.setState({\n          isOpen: !this.state.isOpen\n        });\n      }\n\n  render() {\n    return (\n      <div>\n        <Navbar color=\"dark\" expand=\"md\" className='shadow-lg'>\n          <NavbarBrand>\n          <Link to='/'>HeadsUP</Link>\n          </NavbarBrand>\n          <NavbarToggler onClick={this.toggle} />\n          <Collapse isOpen={this.state.isOpen} navbar>\n          <LinkContainer to='/levels'>\n            <NavLink>levels</NavLink>\n          </LinkContainer>\n          </Collapse>\n        </Navbar>\n      </div>\n    )\n  }\n}\n\nexport default NavBar;","import React, { Component } from 'react'\nimport { Form, FormGroup, Label, Input, Button, Card, CardBody } from 'reactstrap';\nimport { connect } from 'react-redux';\nimport { teamNames } from '../../store/actions/teamActions'\n\n\nclass Opponents extends Component {\n\n    // Set state\n    state = {\n        teamOne: '',\n        teamTwo: ''\n    }\n\n    // Handler for input into fields\n    handleChange = (e) => {\n        this.setState({\n            [e.target.id]: e.target.value\n        })\n    }\n\n\n    handleSubmit = (e) => {\n        this.props.teamNames(this.state);\n        console.log(this.props);\n        this.props.history.push(\"levels\");\n    }\n\n  render() {\n    return (\n      <div className='section h-100'>\n        <div className='container'>\n            <div className='row'>\n                <div className='col-sm-3'></div>\n                <div className='col-sm-6'>\n                    <Form onSubmit={this.handleSubmit}>\n                    <FormGroup>\n                        <Card className='my-3'>\n                            <CardBody className='shadow-lg'>\n                                <Label for=\"teamOne\">Opponent One</Label>\n                                <Input type=\"text\" onChange={this.handleChange} className='mb-4'  name=\"teamOne\" id=\"teamOne\" placeholder=\"Enter name\" />\n                                <Label for=\"teamTwo\">Opponent Two</Label>\n                                <Input type=\"text\" onChange={this.handleChange}  name=\"teamTwo\" id=\"teamTwo\" placeholder=\"Enter name\" />\n                                \n                                <Button color='success' className='float-right my-2'>Level Select >></Button>\n                            </CardBody>\n                        </Card>\n                    </FormGroup>\n                    </Form>\n                </div>\n                <div className='col-sm-3'></div>\n            </div>\n        </div>\n      </div>\n    )\n  }\n}\n\n\n// Don't forget to connect the component to the redux store\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        // This makes this method available via props to the component\n        // so, we can call `this.createProject` in the component and \n        // it will accept the `project` object we've created and then\n        // pass it into the dispatch method which is calling `createProject`\n        // from our `projectActions` file\n        teamNames: (teams) => dispatch(teamNames(teams))\n    }\n}\n// Null is passed in as the first parameter because it should be\n// `mapStateToProps` but that's not needed here. For a component\n// that needs to pass in state, this would NOT be null.\nexport default connect(null, mapDispatchToProps)(Opponents)","export const teamNames = (names) => {\n    return (dispatch, getState) => {\n        dispatch({ type: 'ADD_NAMES', names });\n    }\n}\n","// This file will house an array of objects that contains all the info for the levels\n\n\nconst levels = [\n    {\n        id: 0,\n        name: 'Oceania/Pacific',\n        desc: 'A map of Oceania and Antarctica...',\n        path: './maps/oceaniaMap.png',\n        questions: [\n            {\n                letter: 'a',\n                answer: 'Marshall Islands',\n            },\n            {\n                letter: 'b',\n                answer: 'Palau',\n            },\n            {\n                letter: 'c',\n                answer: 'Federated States of Micronesia',\n            },\n            {\n                letter: 'd',\n                answer: 'Papua New Guinea',\n            },\n            {\n                letter: 'e',\n                answer: 'Solomon Islands',\n            },\n            {\n                letter: 'f',\n                answer: 'Samoa',\n            },\n            {\n                letter: 'g',\n                answer: 'Vanuatu',\n            },\n            {\n                letter: 'h',\n                answer: 'Fiji',\n            },\n            {\n                letter: 'i',\n                answer: 'Australia',\n            },\n            {\n                letter: 'j',\n                answer: 'Tonga',\n            },\n            {\n                letter: 'k',\n                answer: 'New Zealand',\n            }\n        ]\n    },\n    {\n        id: 1,\n        name: 'Monsoon Asia',\n        desc: 'A map of Monsoon Asia...',\n        questions: [\n            {\n                letter: 'a',\n                answer: 'Answer',\n            },\n            {\n                letter: 'b',\n                answer: 'Answer1',\n            },\n            {\n                letter: 'c',\n                answer: 'Answer2',\n            },\n        ]\n    },\n    {\n        id: 2,\n        name: 'SW Asia',\n        desc: 'A map of Monsoon Asia...',\n        questions: [\n            {\n                letter: 'a',\n                answer: 'Answer',\n            },\n            {\n                letter: 'b',\n                answer: 'Answer1',\n            },\n            {\n                letter: 'c',\n                answer: 'Answer2',\n            },\n        ]\n    }\n]\n\nexport default levels","import React, { Component } from 'react'\nimport { Form, FormGroup, Label, Input, Button, Card, CardBody } from 'reactstrap';\nimport levels from './levelMaster'\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { levelPicker } from '../../store/actions/levelActions'\n\n\nclass Levels extends Component {\n\n    // Set state\n    state = {\n        levelChoice: ''\n    }\n\n    \n\n    handleSubmit = (e) => {\n        this.props.levelPicker(e.target.id);\n        this.props.history.push(\"fight\");\n    }\n\n  render() {\n    return (\n      <div className='section h-100'>\n        <div className='container-fluid'>\n            <div className='row'>\n                {levels.map(level => {\n                    return (\n                        <div className='col-sm-4'>\n                            <Card className='my-3'>\n                                <CardBody className='shadow-lg'>\n                                    <Form onSubmit={this.handleSubmit}>\n                                        <FormGroup>\n                                            <h4>{level.name}</h4>\n                                                <Button color='success' onClick={this.handleSubmit}  id={level.id} className='my-2'>Play This Map</Button>\n                                        </FormGroup>\n                                    </Form>\n                                </CardBody>\n                            </Card>     \n                    </div>\n                    )\n                })}\n            </div>\n        </div>\n      </div>\n    )\n  }\n}\n\n// Don't forget to connect the component to the redux store\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        levelPicker: (level) => dispatch(levelPicker(level))\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        state\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Levels);","export const levelPicker = (level) => {\n    return (dispatch, getState) => {\n        dispatch({ type: 'PICK_LEVEL', level });\n    }\n}\n","import React from 'react';\nimport { Card, CardBody } from 'reactstrap';\n\nconst TeamName = (props) => {\n\n    const { team } = props;\n\n    return (\n        <Card className='bg-dark text-white text-center shadow-lg'>\n            <CardBody>\n                <h3 className='card-title'>{ team }</h3>\n            </CardBody>\n        </Card>\n    )\n\n}\n\nexport default TeamName","import React from 'react';\nimport { Card, CardBody } from 'reactstrap';\n\nconst TeamScore = (props) => {\n\n    const { score } = props;\n\n    return (\n        <Card className='bg-dark text-white text-center shadow-lg'>\n            <CardBody>\n                <h1 className='card-title'>{ score }</h1>\n            </CardBody>\n        </Card>\n    )\n\n}\n\nexport default TeamScore","import React, { Component } from 'react';\nimport { Card, CardBody, Media } from 'reactstrap';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\n\n\nclass Map extends Component {\n    constructor(props) {\n        super(props);\n      }\n\n    render() {\n\n        if(this.props.state.level.levelChoice == null) return <Redirect to='/' />\n        \n        const imgStyle = {\n            maxWidth: 600,\n        }\n\n        return (\n            <Card className='bg-dark text-white text-center shadow-lg'>\n                <CardBody>\n                    <img className='img img-responsive' style={imgStyle} src={this.props.state.level.levelObject.path} alt={this.props.state.level.levelObject.name} />\n                </CardBody>\n            </Card>\n        )\n    \n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        state\n    }\n}\n\nexport default connect(mapStateToProps, null)(Map)","import React, { Component } from 'react';\nimport { Card, CardBody, FormGroup, Form, Label, Input, Button } from 'reactstrap';\nimport { connect } from 'react-redux';\nimport { addPoints } from '../../store/actions/scoreActions'\nimport { Redirect } from 'react-router-dom';\nimport { withRouter } from 'react-router'\n\n\nclass Controls extends Component {\n    constructor(props) {\n        super(props);\n        this.answerRef = React.createRef();\n      }\n\n    // set state\n    state = {\n        userAnswer: '',\n        currentQuestion: 0\n    }\n\n\n    // Check an answer and award points\n    handleClick = (e) => {\n        if(this.state.userAnswer == this.props.state.level.levelObject.questions[this.state.currentQuestion].answer) {\n            // Really needed that plus-1 there...\n            if(this.state.currentQuestion + 1 < this.props.state.level.levelObject.questions.length) {\n                this.setState({\n                    currentQuestion: this.state.currentQuestion + 1,\n                    userAnswer: ''\n                })\n            } else  {\n                this.setState({\n                    currentQuestion: 0,\n                    userAnswer: ''\n                })\n                this.props.history.push(\"/\");\n            }\n\n            // TODO: add points!\n            this.props.addPoints(e.target.id);\n            \n\n        } else {\n            // TODO: subtract points\n        }\n        \n    }\n\n    // Handler for input into fields\n    handleChange = (e) => {\n        this.setState({\n            [e.target.id]: e.target.value\n        })\n    }\n\n    handleSubmit = (e) => {\n        this.props.history.push(\"levels\");\n    }\n\n    render() {\n\n        const { teams, level } = this.props.state;\n\n        if(level.levelChoice == null) return <Redirect to='/' />\n\n        return (\n            <div>\n                <div className='row'>\n                    <div className='col-sm-12 text-white'>\n                        <p>Q: {level.levelObject.questions[this.state.currentQuestion].letter}?</p>\n                    </div>\n                </div>\n                <div className='row'>\n                    <div className='col-sm-12'>\n                            <Card className='my-1 shadow-lg bg-dark text-white'>\n                                <CardBody>\n                                    <Input type=\"text\" onChange={this.handleChange} ref={this.answerRef} className='mb-4' name=\"userAnswer\" id=\"userAnswer\" placeholder=\"Answer...\" value={this.state.userAnswer}/>\n                                    <Button color='success' id='teamOneScore' onClick={this.handleClick} className='float-left mx-2'>{teams.teamOne}'s Answer</Button>\n                                    <Button color='success' id='teamTwoScore' onClick={this.handleClick} className='float-right mx-2'>{teams.teamTwo}'s Answer</Button>\n                                </CardBody>\n                            </Card>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n    \n\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        addPoints: (team) => dispatch(addPoints(team))\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        state\n    }\n}\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(Controls))","export const addPoints = (team) => {\n    return (dispatch, getState) => {\n        dispatch({ type: 'ADD_POINTS', team });\n    }\n}\n","import React, { Component } from 'react'\nimport { Form, FormGroup, Label, Input, Button, Card, CardBody } from 'reactstrap';\nimport { Link } from 'react-router-dom';\nimport TeamName from './TeamName'\nimport TeamScore from './TeamScore'\nimport Map from './Map'\nimport Controls from './Controls'\nimport { connect } from 'react-redux';\n\n\nclass Fight extends Component {\n\n    constructor(props) {\n        super(props);\n      }\n\n    // Set state\n    state = {\n        scoreOne: 0,\n        scoreTwo: 0\n    }\n\n    handleSubmit = (e) => {\n        console.log(this.state.scoreOne);\n        console.log(this.state.scoreTwo);\n    }\n\n  render() {\n\n    const { teams, scores } = this.props.state;\n\n    return (\n      <div className='section h-100'>\n        <div className='container-fluid'>\n            <div className='row my-3'>\n                <div className='col-md-3'>\n                    <div className='row'>\n                        <div className='col-sm-12'>\n                            {/* TeamOne NAME component will go here */}\n                            <TeamName team={ teams.teamOne }/>\n                        </div>\n                    </div>\n                    <div className='row my-2'>\n                        <div className='col-sm-12'>\n                            {/* TeamOne score component will go here */}\n                            <TeamScore score={ scores.teamOneScore }/>\n                        </div>\n                    </div>\n                </div>\n                <div className='col-md-6'>\n                    <div className='row'>\n                        <div className='col-sm-12'>\n                            {/* Map image component will go here */}\n                            <Map />\n                        </div>\n                    </div>\n                </div>\n                <div className='col-md-3'>\n                    <div className='row'>\n                        <div className='col-sm-12'>\n                            {/* TeamTwo NAME component will go here */}\n                            <TeamName team={ teams.teamTwo }/>\n                        </div>\n                    </div>\n                    <div className='row my-2'>\n                        <div className='col-sm-12'>\n                            {/* TeamTwo score component will go here */}\n                            <TeamScore score={ scores.teamTwoScore }/>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div className='row my-3'>\n                <div className='col-sm-3' />\n                <div className='col-sm-6'>\n                    {/* The current question info + input and buttons will go here */}\n                    <Controls />\n                </div>\n                <div className='col-sm-3' />\n            </div>\n        </div>\n      </div>\n    )\n  }\n}\n\n// Don't forget to connect the component to the redux store\nconst mapDispatchToProps = (dispatch) => {\n    // something soon...\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        state\n    }\n}\n\nexport default connect(mapStateToProps, null)(Fight);","import React from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport NavBar from './components/navigation/Navbar';\nimport Opponents from './components/splash/Opponents';\nimport Levels from './components/levels/Levels';\nimport Fight from './components/game/Fight';\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App backs\">\n        <NavBar />\n        <Route exact path='/' component={Opponents} />  \n        <Route exact path='/levels' component={Levels} />  \n        <Route exact path='/fight' component={Fight} />  \n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","// Takes in two parameters: state and action with a default value\n\nconst initState = {\n    teamOne: null,\n    teamTwo: null\n}\n\nconst teamReducer = (state = initState, action) => {\n    switch (action.type) {\n        case 'ADD_NAMES': \n            console.log('Created teams', action.names);\n            return {\n                ...state,\n                teamOne: action.names.teamOne,\n                teamTwo: action.names.teamTwo\n            }\n            default:\n                return state;\n    }\n    \n}\n\nexport default teamReducer","// Takes in two parameters: state and action with a default value\nimport levels from '../../components/levels/levelMaster'\n\nconst initState = {\n    levelObject: null,\n    levelChoice: null\n}\n\nconst levelReducer = (state = initState, action) => {\n    switch (action.type) {\n        case 'PICK_LEVEL': \n            levels[action.level].questions.sort(function(a, b){return 0.5 - Math.random()});\n            console.log(levels[action.level].questions);\n            console.log(`Level chosen ${levels[action.level].name}`);\n            return {\n                ...state,\n                levelObject: levels[action.level],\n                levelChoice: levels[action.level].name\n            }\n            default:\n                return state;\n    }\n}\n\nexport default levelReducer","// Takes in two parameters: state and action with a default value\n\nconst initState = {\n    teamOneScore: 0,\n    teamTwoScore: 0\n}\n\nconst scoreReducer = (state = initState, action) => {\n\n    if(action.team == 'teamOneScore') {\n        console.log(`Added points to  ${action.team}`);\n        return {\n            ...state,\n            teamOneScore: state.teamOneScore + 1\n        }\n    } else if (action.team == 'teamTwoScore') {\n        console.log(`Added points to  ${action.team}`);\n        return {\n            ...state,\n            teamTwoScore: state.teamTwoScore + 1\n        }  \n    } else {\n        return state;\n    }\n\n    // switch (action.type) {\n    //     case 'ADD_POINTS': \n    //         console.log(`Added points to  ${action.team}`);\n    //         return {\n    //             ...state\n    //         }\n    //         default:\n    //             return state;\n    // }\n}\n\nexport default scoreReducer","// EXAMPLE!\nimport teamReducer from './teamReducer';\nimport levelReducer from './levelReducer';\nimport scoreReducer from './scoreReducer';\n\nimport { combineReducers } from 'redux';\n\nconst rootReducer = combineReducers({\n    teams: teamReducer,\n    level: levelReducer,\n    scores: scoreReducer\n})\n\nexport default rootReducer","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './store/reducers/rootReducer';\nimport { Provider } from 'react-redux';\n\nconst store = createStore(rootReducer, applyMiddleware(thunk));\n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n// comment\n"],"sourceRoot":""}